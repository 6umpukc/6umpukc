#!/usr/bin/env perl

use 5.016;
use warnings;
no if $] >= 5.018000, warnings => 'experimental::smartmatch';

use FindBin qw($RealBin $Bin $Script);
use Cwd qw(cwd getcwd abs_path);
use File::Basename;
use File::Copy;
use File::Path qw(make_path remove_tree);
use File::Find qw(finddepth find);
use Config;
use Data::Dumper;

#use lib "$RealBin/vendor/lib/perl5";
#use Text::CSV;

# common functions

sub init_default_env {
	$ENV{'PHP_URLS_WIN32'} = 'https://windows.php.net/downloads/releases/php-8.2.22-Win32-vs16-x86.zip';
	$ENV{'PHP_URLS_WIN64'} = 'https://windows.php.net/downloads/releases/php-8.2.22-Win32-vs16-x64.zip';
	$ENV{'PHP_URLS_MACOS'} = '';
	$ENV{'PHP_URLS_LINUX'} = '';

	$ENV{'NODE_URLS_WIN32'} = 'https://nodejs.org/dist/v20.17.0/node-v20.17.0-win-x86.zip';
	$ENV{'NODE_URLS_WIN64'} = 'https://nodejs.org/dist/v20.17.0/node-v20.17.0-win-x64.zip';
	$ENV{'NODE_URLS_MACOS'} = 'https://nodejs.org/dist/v20.17.0/node-v20.17.0-darwin-x64.tar.gz';
	$ENV{'NODE_URLS_LINUX'} = 'https://nodejs.org/dist/v20.17.0/node-v20.17.0-linux-x64.tar.gz';

	$ENV{'NODE14_URLS_WIN32'} = 'https://nodejs.org/dist/v14.21.3/node-v14.21.3-win-x86.zip';
	$ENV{'NODE14_URLS_WIN64'} = 'https://nodejs.org/dist/v14.21.3/node-v14.21.3-win-x64.zip';
	$ENV{'NODE14_URLS_MACOS'} = 'https://nodejs.org/dist/v14.21.3/node-v14.21.3-darwin-x64.tar.gz';
	$ENV{'NODE14_URLS_LINUX'} = 'https://nodejs.org/dist/v14.21.3/node-v14.21.3-linux-x64.tar.gz';

	$ENV{'BITRIX_SRC_MICRO'} = 'https://www.1c-bitrix.ru/download/start_encode_php5.tar.gz';
	$ENV{'BITRIX_SRC_CORE'} = 'https://www.1c-bitrix.ru/download/start_encode_php5.tar.gz';
	$ENV{'BITRIX_SRC_START'} = 'https://www.1c-bitrix.ru/download/start_encode_php5.tar.gz';
	$ENV{'BITRIX_SRC_BUSINESS'} = 'https://www.1c-bitrix.ru/download/business_encode_php5.tar.gz';
	$ENV{'BITRIX_SRC_CRM'} = 'https://www.1c-bitrix.ru/download/portal/bitrix24_encode_php5.tar.gz';
	$ENV{'BITRIX_SRC_SETUP'} = 'https://www.1c-bitrix.ru/download/scripts/bitrixsetup.php';
	$ENV{'BITRIX_SRC_RESTORE'} = 'https://www.1c-bitrix.ru/download/scripts/restore.php';
	$ENV{'BITRIX_SRC_TEST'} = 'https://dev.1c-bitrix.ru/download/scripts/bitrix_server_test.php';

	$ENV{'BX_MKCERT'} = 'bx.local *.bx.local';

	#$ENV{'DIR_PUBLIC'} = '/public/';
	$ENV{'DIR_PUBLIC'} = '/';

	#$ENV{'SITE_DIR_USER'} = 'www-data:www-data';
	$ENV{'SITE_DIR_RIGHTS'} = '0775';

	$ENV{'DIR_LOCAL_SITES'} = $ENV{'HOME'} . '/Local Sites/';
}

sub is_site_env {
	my $path = shift;
	my $configContent = file_get_contents($path . '/.env');

	if ((index($configContent, 'APP_URL=') >= 0)
			|| (index($configContent, 'SOLUTION_GIT_REPOS=') >= 0)) {
		return 1;
	}

	return 0;
}

sub detect_site_root {
	my $path = shift;
	my $checkVars = shift;
	if (!defined $checkVars) {
		$checkVars = 1;
	}

	if ($path eq '') {
		$path = exists $ENV{'PWD'}? $ENV{'PWD'} : getcwd();
	}
	if (-f "$path/.env") {
		if ($checkVars) {
			if (is_site_env($path)) {
				return $path;
			}
		} else {
			return $path;
		}
	}
	if (($path ne '') && ($path ne dirname($path))) {
		return detect_site_root(dirname($path));
	}
	return '';
}

sub get_env {
	my $name = shift;
	my $result = exists $ENV{$name}? $ENV{$name} : '';

	if (substr($result, 0, 1) eq '~') {
		$result = $ENV{'HOME'} . substr($result, 1);
	}
	$result =~ s/\$HOME/$ENV{'HOME'}/g;
	$result =~ s/\$PATH/$ENV{'PATH'}/g;

	return $result;
}

sub load_env {
	my $path = shift;
	my $disableSetEnv = shift;

	if (!-f $path) {
		return;
	}
	my %result = ();

	my $isMultiline = 0;
	my @lines = split("\n", file_get_contents($path));
	my $key = '';
	my $value = '';
	for my $line (@lines)
	{
		if ($isMultiline) {
			$value .= "\n" . $line;

			my $testLine = unquote($line);
			if ((index($testLine, "'") >= 0) || (index($testLine, '"') >= 0)) {
				$isMultiline = 0;
				$value = trim(unquote(trim($value)));
				$result{$key} = $value;
				if (!defined $disableSetEnv) {
					$ENV{$key} = $value;
				}
				$key = '';
				$value = '';
			}

			next;
		}

		$line = trim($line);
		my $p = index($line, '=');
		if ($p < 0) {
			next;
		}

		my @row = (substr($line, 0, $p), substr($line, $p + 1));
		$key = $row[0];
		if ($key eq '') {
			next;
		}
		if (substr($key, 0, 1) eq '#') {
			next;
		}

		$value = unquote($row[1]);

		if ((index($value, "'") >= 0) || (index($value, '"') >= 0)) {
			$isMultiline = 1;
			next;
		}

		$result{$key} = $value;
		if (!defined $disableSetEnv) {
			$ENV{$key} = $value;
		}
	}

	return %result;
}

sub is_mingw {
    my $msystem = exists $ENV{'MSYSTEM'} ? $ENV{'MSYSTEM'} : '';
	if ($msystem ~~ ['MINGW64', 'MINGW32', 'MSYS']) {
        return 1;
    }
    return 0;
}

sub is_windows_32bit {
	return (index($ENV{'PROCESSOR_ARCHITECTURE'}, 'x86') >= 0)? 1 : 0;
}

sub file_get_contents {
    my $filename = shift;
    my $result = '';
    if (open(my $fh, '<:encoding(UTF-8)', $filename)) {
        while (my $line = <$fh>) {
            $result .= $line;
        }
    }
    return $result;
}

sub file_put_contents {
    my $filename = shift;
    my $content = shift;
    if (open(my $fh, '>:encoding(UTF-8)', $filename)) {
        print $fh $content;
        close $fh;
        return 1;
    }
    return 0;
}

sub file_get_contents_win {
	my $filename = shift;
    my $result = '';
    if (open(my $fh, '<:encoding(Windows-1251)', $filename)) {
        while (my $line = <$fh>) {
            $result .= $line;
        }
    }
    return $result;
}

sub file_put_contents_win {
	my $filename = shift;
    my $content = shift;
    if (open(my $fh, '>:encoding(Windows-1251)', $filename)) {
        print $fh $content;
        close $fh;
        return 1;
    }
    return 0;
}

sub trim {
    my $s = shift;
    $s =~ s/^\s+|\s+$//g;
    return $s;
}

sub unquote {
	my $s = shift;
	my $start = substr($s, 0, 1);
	my $end = substr($s, -1, 1);
	while ((length($s) > 1) && ($start eq $end) && (($start eq '"') || ($start eq "'")))
	{
		$s = substr($s, 1, -1);
		$start = substr($s, 0, 1);
		$end = substr($s, -1, 1);
	}
	return $s;
}

sub is_wsl {
	return ((exists $ENV{'IS_WSL'})
		|| (exists $ENV{'WSL_DISTRO_NAME'}));
}

sub confirm_continue {
    my $title = shift;
    print $title . " Type 'yes' to continue: ";
    my $line = <STDIN>;
    chomp $line;
    return trim($line) eq 'yes';
}

sub check_command {
	my $cmd = shift;
	my $test = 'which ' . $cmd;
	my $res = qx($test);
	my $path = trim($res);
	if (index($path, '/mnt/c/') >= 0) {
		if (is_wsl()) {
			# skip windows executable from WSL
			return 0;
		}
	}

    if ($path eq '') {
        return 0;
    }
    return 1;
}

sub require_command {
    my $cmd = shift;
    if (!check_command($cmd)) {
        die('[' . $cmd . '] command - not found.');
    }
}

sub require_file {
    my $fname = shift;
	my $info = shift || '';
    if (!-f $fname) {
        die($info . ' [' . $fname . '] file - not found.');
    }
}

sub zip_archive_extract {
    require_command('unzip');

	my ($src, $dest) = @_;
	my $result = '';
	my $cmd = "unzip -o '$src' -d '$dest'";
	$result = qx{$cmd};
	return $result;
}

sub tgz_archive_extract {
	require_command('tar');

	my ($src, $dest, $dirFromArchive) = @_;

	if (is_mingw()) {
		$src =~ s/\\/\//g;
		$src =~ s/C\:/\/c/g;
	}

	my $result = '';
	my $cmd = "tar -xvzf '$src'";
	if ($dest ne '') {
		$cmd .= " -C '" . $dest . "'";
	}
	if (defined $dirFromArchive && ($dirFromArchive ne '')) {
		$cmd .= ' ' . $dirFromArchive;
	}

	$result = qx{$cmd};
	return $result;
}

sub any_archive_extract {
	my $src = shift;
	my $dest = shift;

	if (substr($src, -4) eq '.zip') {
		return zip_archive_extract($src, $dest);
	} elsif (substr($src, -7) eq '.tar.gz') {
		return tgz_archive_extract($src, $dest);
	}
}

sub request_useragent {
    return 'Mozilla/5.0 (X11; Linux x86_64; rv:66.0) Gecko/20100101 Firefox/66.0';
}

sub request_get {
    require_command('curl');

    my ($url, $outfile, $silent) = @_;
	my $silentOption = '';
	if ((defined $silent) && ($silent eq '1'))
	{
		$silentOption = ' -s';
	}
    my $result = '';
    my $cmd = "curl"
		. $silentOption
		. " -L '$url'"
        . " -A '" . request_useragent() . "'";
    if ($outfile && ($outfile ne '')) {
        $cmd .= " -o '$outfile'";
    }
    $result = qx{$cmd};
    return $result;
}

sub is_bx_debug() {
	return (exists $ENV{'BX_DEBUG'} && ($ENV{'BX_DEBUG'} eq '1'));
}

sub is_ubuntu {
	my $os = $Config{'myuname'};
	return (index($os, 'debian') > 0
		|| index($os, 'ubuntu') >= 0
		|| index($os, 'Ubuntu') >= 0);
}

sub run {
	my $cmd = shift;
	my $sudo = shift;
	my $disableDebug = shift;

	if (!defined($sudo) || ($sudo ne 'sudo')) {
		$sudo = '';
	}

	$cmd = trim($sudo . ' ' . $cmd);

	if (!defined($disableDebug) || ($disableDebug == 0)) {
		if (is_bx_debug()) {
			say '';
			say '$ ' . $cmd;
			say '';
		}
	}

	return system($cmd);
}

sub run_win_cmd {
	my $cmd = shift;
	run 'cmd.exe /c ' . $cmd .  ' 2>/dev/null';
}

sub sudo {
	my $cmd = shift;
	my $sudo = '';
	if (is_ubuntu()) {
		$sudo = 'sudo';
	}
	if (exists $ENV{'BX_ROOT_USER'} && ($ENV{'BX_ROOT_USER'} eq '1')) {
		$sudo = '';
	}
	return run($cmd, $sudo);
}

sub patch_file {
	my $fname = shift;
	my $fixContent = shift;

	if (-f $fname) {
		my $originalContent = file_get_contents($fname);
		if (index($originalContent, $fixContent) < 0) {
			file_put_contents($fname, $originalContent . "\n" . $fixContent . "\n");
		}
	}
	else {
		file_put_contents($fname, "\n" . $fixContent . "\n");
	}
}

sub sudo_patch_file {
	my $fname = shift;
	my $content = shift;

	if (! -f $fname) {
		return;
	}
	my $path = $ENV{'HOME'};
	my $tmp = $path . '/.patch.' . basename($fname) . '.tmp';
	my $originalContent = file_get_contents($fname);
	if (index($originalContent, $content) < 0) {
		$content = $originalContent . "\n" . $content . "\n";
		file_put_contents($tmp, $content);
		sudo("mv '" . $tmp . "' " . $fname);
	}
}

sub replace_var_file {
	my $fname = shift;
	my $name = shift;
	my $value = shift;

	if (! -f $fname) {
		return;
	}

	my $content = file_get_contents($fname);
	if ($content =~ /$name\=".+?"/) {
		$content =~ s/$name\=".+?"/$name="$value"/;
		file_put_contents($fname, $content);
	}
}

sub download_binaries {
	my $urlPrefix = shift;
	my $downloadPath = shift;
	my $destPath = shift;

	if ($downloadPath eq '') {
		$downloadPath = $ENV{'HOME'} . '/.cachebin';
		if (! -d $downloadPath) {
			mkdir($downloadPath);
		}
	}

	if (!$destPath) {
		$destPath = $downloadPath;
	}

	if (! -d $destPath) {
		mkdir($destPath);
	}

	my $srcUrl = '';
	if (is_mingw()) {
		if (is_windows_32bit()) {
			$srcUrl = $ENV{$urlPrefix . '_WIN32'};
		}
		else {
			$srcUrl = $ENV{$urlPrefix . '_WIN64'};
		}
	}
	elsif (is_ubuntu()) {
		$srcUrl = $ENV{$urlPrefix . '_LINUX'};
	}
	else {
		$srcUrl = $ENV{$urlPrefix . '_MACOS'};
	}

	if ($srcUrl eq '') {
		say 'Url for ' . $urlPrefix . ' not defined.';
		return '';
	}

	my $outputFile = $downloadPath . '/' . basename($srcUrl);

	if (! -f $outputFile) {
		say "Loading $srcUrl ...";
		request_get($srcUrl, $outputFile);
	}

	say "Extracting $outputFile to $destPath ...";
	any_archive_extract($outputFile, $destPath);

	return $outputFile;
}

sub require_site_root {
	my $basePath = shift;
	if ($basePath eq '') {
		die "Site root not found.\n";
	}
}

sub ftp_conn_str {
	if (!exists $ENV{'DEPLOY_SERVER'} || ($ENV{'DEPLOY_SERVER'} eq '')) {
		return '';
	}

	return $ENV{'DEPLOY_METHOD'} . '://'
		. $ENV{'DEPLOY_USER'} . ':' . $ENV{'DEPLOY_PASSWORD'}
		. '@' . $ENV{'DEPLOY_SERVER'} . $ENV{'DEPLOY_PORT'} . $ENV{'DEPLOY_PATH'};
}

sub get_ssh_command {
  if (!exists $ENV{'DEPLOY_SERVER'} || ($ENV{'DEPLOY_SERVER'} eq '')) {
    return '';
  }

  my $port = $ENV{'DEPLOY_PORT'};
  if ($port ne '') {
    $port = ' -p' . substr($port, 1);
  }

  my $key = '';
  if (exists $ENV{'DEPLOY_KEY'} && ($ENV{'DEPLOY_KEY'} ne '')) {
    $key = ' -i ' . $ENV{'DEPLOY_KEY'} . ' ';
  }

  return 'ssh ' . $key . $ENV{'DEPLOY_USER'} . '@' . $ENV{'DEPLOY_SERVER'} . $port;
}

sub escape_shell_arg
{
    my $s = shift;
    $s =~ s/\$/\\\$/g;
	return $s;
}

sub ssh_exec_remote {
	my $cmd = shift;
	if (!$cmd || $cmd eq '') {
		$cmd = 'bash --login';
	}
	my $port = $ENV{'DEPLOY_PORT'};
	if ($port ne '') {
		$port = ' -p' . substr($port, 1);
	}

	my $result = '';
	if (exists $ENV{'DEPLOY_PASSWORD'} && ($ENV{'DEPLOY_PASSWORD'} ne '')) {
		$result .= 'sshpass -p "' . escape_shell_arg($ENV{'DEPLOY_PASSWORD'}) . '" ';
	}
	my $key = '';
	if (exists $ENV{'DEPLOY_KEY'} && ($ENV{'DEPLOY_KEY'} ne '')) {
		$key = ' -i ' . $ENV{'DEPLOY_KEY'} . ' ';
	}
	$result .= 'ssh ' . $key . $ENV{'DEPLOY_USER'} . '@' . $ENV{'DEPLOY_SERVER'} . $port
		. ' -t "';
	if (exists $ENV{'DEPLOY_PATH'} && ($ENV{'DEPLOY_PATH'} ne '')) {
		$result .= 'cd ' . $ENV{'DEPLOY_PATH'} . ' && ';
	}
	$result .= $cmd;
	$result .= '"';

	return $result;
}

sub get_putty_command {
	my $profile = shift;

	if (!exists $ENV{'DEPLOY_SERVER'} || ($ENV{'DEPLOY_SERVER'} eq '')) {
		return '';
	}
	my $port = $ENV{'DEPLOY_PORT'};
	if ($port ne '') {
		$port = ' -P ' . substr($port, 1);
	}

	return 'putty ' . ($profile? ' -load ' : ($ENV{'DEPLOY_USER'} . '@')) . $ENV{'DEPLOY_SERVER'} . $port;
}

sub putty_exec_remote {
	my $cmd = shift;
	my $profile = shift;

	if (!$cmd || $cmd eq '') {
		$cmd = 'bash --login';
	}
	my $port = $ENV{'DEPLOY_PORT'};
	if ($port ne '') {
		$port = ' -P ' . substr($port, 1);
	}

	my $result = get_putty_command($profile);

	if (exists $ENV{'DEPLOY_PASSWORD'} && ($ENV{'DEPLOY_PASSWORD'} ne '')) {
		$result .= " -pw '" . $ENV{'DEPLOY_PASSWORD'} . "'";
	}

	#plink -ssh user@host -pw password echo "hi"

	return $result;
}

sub get_site_config {
	my $sitehost = shift;
	return '/etc/apache2/sites-available/' + $sitehost + '.conf';
}

sub require_site_config {
	my $sitehost = shift;
	require_file(
		get_site_config($sitehost),
		"Config for site $sitehost not exists."
	);
}

sub bitrix_minimize {
	my @removeDirs = (
		# ненужные компоненты
		'bitrix/modules/iblock/install/components/bitrix',
		'bitrix/modules/fileman/install/components/bitrix',
		# ненужные модули
		'bitrix/modules/landing', # слишком много файлов в модуле
		'bitrix/modules/highloadblock',
		'bitrix/modules/perfmon',
		'bitrix/modules/bitrixcloud',
		'bitrix/modules/translate',
		'bitrix/modules/compression',
		'bitrix/modules/seo',
		'bitrix/modules/search',
		# ненужные демо решения
		'bitrix/modules/bitrix.sitecorporate',
		'bitrix/wizards/bitrix/demo',
	);
	for my $dir (@removeDirs) {
		if (-d $dir) {
			my $cmd = "rm -Rf '$dir'";
			qx{$cmd};
		}
	}
}

sub bitrix_micromize {
	my %bitrixExcludeDirs = (
		'cache' => 1,
		'managed_cache' => 1,
		'modules' => 1,
		'php_interface' => 1,
	);
	my %bitrixExcludeFiles = (
		'.settings.php' => 1,
	);
	my $dirName = './bitrix';
	my $dh;
	my $res = opendir $dh, $dirName;
	if (!$res) {
		die('Could not open ' . $dirName . ' for reading ' . $! . "\n");
	}
	my @files = readdir $dh;
	for my $f (@files) {
		if ($f eq '.' or $f eq '..') {
			next;
		}
		if (exists $bitrixExcludeDirs{$f} or exists $bitrixExcludeFiles{$f}) {
			next;
		}
		$f = $dirName . '/' . $f;
		if (-d $f) {
			my $cmd = "rm -Rf '$f'";
			qx{$cmd};
		} elsif (-f $f) {
			unlink($f);
		}
	}
	closedir $dh;

	my @removeFiles = (
		'.access.php',
		#'.htaccess',
		#'index.php',
		'install.config',
		'license.html',
		'license.php',
		'readme.html',
		'readme.php',
		'web.config',
		'bitrix/modules/main/classes/mysql/database_mysql.php',
	);
	for my $f (@removeFiles) {
		if (-f $f) {
			unlink($f);
		}
	}
}

sub install_php {
	my $version = shift || '';
	sudo('apt install'
		. " php$version"
		. " php$version-fpm"
		. " php$version-mysql"
		. " php$version-mbstring"
		. " php$version-opcache"
		. " php$version-zip"
		. " php$version-xml"
		. " php$version-curl"
		. " php$version-gd"
		. " php$version-sqlite3"
		. " php$version-imagick"
		. " php$version-xdebug"
	);

	# patch configs
	my $phpContent = file_get_contents(dirname($RealBin) . '/.template/bitrix.php.ini');
	my @phpDirs = glob('/etc/php/*');
	my @tmp = map { basename($_) } sort { $b cmp $a } @phpDirs;

	for my $phpVersion (@tmp) {
		if (($version eq '') || ($version eq $phpVersion))
		{
			say "Patch $phpVersion for Bitrix...";
			sudo_patch_file('/etc/php/' . $phpVersion . '/apache2/php.ini', $phpContent);
			sudo_patch_file('/etc/php/' . $phpVersion . '/fpm/php.ini', $phpContent);
			sudo_patch_file('/etc/php/' . $phpVersion . '/cli/php.ini', $phpContent);
		}
	}
}

sub path2wsl {
	my $path = shift;

	my $distroName = exists $ENV{'WSL_DISTRO_NAME'}? $ENV{'WSL_DISTRO_NAME'} : 'Ubuntu';

	$path = abs_path($path); #FIX for symlinks

	my $result = '\\\wsl.localhost\\' . $distroName . $path;

	return $result;
}

sub get_filezilla_command {
	my $conn_str = shift;
	my $basePath = shift;
	my $exePath = shift;

	if (!$exePath || ($exePath eq '')) {
		$exePath = 'filezilla';
	}

	if (is_wsl())
	{
		$basePath = path2wsl($basePath);
	}

	return $exePath . " '" . $conn_str . "' --local='" . $basePath . "'";
}

sub remove_base_path {
	my $result = shift;
	our $site_root;

	$result =~ s/$site_root//;

	return $result;
}

sub process_dir_links {
	my $path = shift;
	my $dest = shift;
	my $moduleName = shift;
	my $createSubdirs = shift || 0;
	my $commonFiles = shift;

	my %result = ();

	if (! -d $path) {
		return %result;
	}

	if (! -d $dest) {
		make_path($dest);
	}

	say remove_base_path($path) . " -> " . remove_base_path($dest);

	opendir(my $dh, $path);
	my @files = readdir($dh);
	closedir($dh);

	for my $f (@files) {
		if (($f eq '.') or ($f eq '..')) {
			next;
		}

		my $srcPath = $path . '/' . $f;
		my $destPath = $dest . '/' . $f;

		if ($commonFiles->{$destPath}) {
			process_dir_links(
				$srcPath,
				$destPath,
				$moduleName
			);
			next;
		}

		my $tmpPath = '/' . basename(dirname($srcPath)). '/' . basename($srcPath);
		my $isSpecialPath = 0;
		#TODO!!! list or check dirs in common template and common_template
		if ($tmpPath eq '/components/bitrix') {
			$isSpecialPath = 1;
		}
		if ($isSpecialPath) {
			process_dir_links(
				$srcPath,
				$destPath,
				$moduleName
			);
			next;
		}

		if ((-l $destPath) or (-f $destPath)) {
			if (!$isSpecialPath) {
				unlink($destPath);
			}
		} elsif (-d $destPath) {
			remove_tree($destPath);
		}

		if (-d $srcPath) {
			if ($createSubdirs) {
				make_path($destPath);
				$result{$destPath} = 1;
				process_dir_links(
					$srcPath,
					$destPath,
					$moduleName
				);
			} else {
				say "\tlink: " . $f;
				symlink($srcPath, $destPath);
				#TODO!!! - for windows: mklink /D "path to newlink" "path to module folder"
			}
		} else {
			say "\tlink: " . $f;
			symlink($srcPath, $destPath);
			#TODO!!! - for windows: mklink "path to newlink" "path to module folder"
		}
	}

	say '';

	return %result;
}

sub find_dir_by_path {
	my $basePath = shift;
	my $path = shift;
	my $result = '';

	if (! -d $basePath) {
		return $result;
	}

	find (sub {
		if ($result ne '') {
			return;
		}

		if (index($File::Find::name, $path) >= 0) {
			$result = $File::Find::dir;
		}
    }, $basePath);

	return $result;
}

sub is_module_using_extensions {
	my $path = shift;
	$path .= '/.env';

	if (! -f $path) {
		return 0;
	}

	my %moduleEnv = load_env($path, 1);

	return exists $moduleEnv{'USING_EXTENSIONS'} && ($moduleEnv{'USING_EXTENSIONS'} eq '1');
}

sub process_module_links {
	my $basePath = shift;
	my $modulePath = shift;
	my $moduleName = shift;

	say 'Process module ' . $moduleName . ' ...';
	say '';

	my ($partnerName, $moduleId) = split(/\./, $moduleName);
	my $jsRel = $partnerName . '/' .  $moduleId;
	my $jsFrom;
	my $jsPath;
	if (is_module_using_extensions($modulePath, 'USING_EXTENSIONS')) {
		$jsFrom = 'install/js/' . $jsRel;
		$jsPath = '/bitrix/js/' . $jsRel;
	} else {
		$jsFrom = 'install/js';
		$jsPath = '/bitrix/js/' . $moduleName;
	}

	my %resourceDirs = (
		'install/components/' . $partnerName => '/bitrix/components/' . $partnerName,
		'install/components/' . $moduleName => '/bitrix/components/' . $moduleName,
		'install/wizards/' . $partnerName => '/bitrix/wizards/' . $partnerName,
		'install/admin' => '/bitrix/admin',
		'install/tools' => '/bitrix/tools',
		'install/gadgets' => '/bitrix/gadgets',
		'install/templates' => '/bitrix/templates',
		'install/services' => '/bitrix/services',
		$jsFrom => $jsPath,
		'install/css' => '/bitrix/css',
		'install/themes/.default/' => '/bitrix/themes/.default',
	);

	for my $src (keys(%resourceDirs)) {
		process_dir_links(
			$modulePath . '/' . $src,
			$basePath . $resourceDirs{$src},
			$moduleName
		);
	}

	# process templates #TODO!!! - вынести частный список в настройку SOLUTION_LINK_DIRS
	my $templatesPath = find_dir_by_path($modulePath . '/install/wizards/' . $partnerName, '/site/templates/');
	if ($templatesPath ne '') {
		my $templatesCommonPath = dirname($templatesPath) . '/templates_common';

		opendir(my $dh, $templatesPath);
		my @files = readdir($dh);
		closedir($dh);
		for my $f (@files) {
			if (($f eq '.') or ($f eq '..')) {
				next;
			}

			my %commonFiles = ();
			if (-d $templatesCommonPath) {
				%commonFiles = process_dir_links(
					$templatesCommonPath,
					$basePath . '/bitrix/templates/' . $f,
					$moduleName,
					1
				);
			}

			process_dir_links(
				$templatesPath . '/' . $f,
				$basePath . '/bitrix/templates/' . $f,
				$moduleName,
				0,
				\%commonFiles
			);
		}
	}
}

sub get_map_repos {
	my $basePath = shift;
	my @result = ();

	if (!exists $ENV{'SOLUTION_GIT_REPOS'}) {
		return @result;
	}

	my @lines = split(/\n/, $ENV{'SOLUTION_GIT_REPOS'});
	for my $line (@lines) {
		$line = trim($line);
		if ($line eq '') {
			next;
		}

		my @tmp = split(';', $line);
		my $url = trim($tmp[0]);
		my $moduleId = basename($url, '.git');
		my $pathModules = $basePath . '/bitrix/modules/';

		my $colNum = scalar(@tmp);
		my $branch = ($colNum > 1)? trim($tmp[1]) : 'master';
		my $path = ($colNum > 2)? trim($tmp[2]) : '';
		if ($path eq '') {
			$path = $pathModules . $moduleId;
		}
		my $page = ($colNum > 3) ? trim($tmp[3]) : '';

		push @result, {
			'moduleId' => $moduleId,
			'url' => $url,
			'branch' => $branch,
			'path' => $path,
			'page' => $page,
		};
	}

	return \@result;
}

sub service {
	my $action = shift;
	my $name = shift;
	if (is_wsl() && is_ubuntu()) {
		sudo("service $name $action");
	} else {
		sudo("systemctl $action $name");
	}
}

sub tar_archive_create {
	require_command('tar');

	my $dest = shift;
	my $src = shift;

	if (!-d $src) {
		say "Folder $src - not exists.";
		return;
	}

	if (-f $dest) {
		unlink($dest);
	}

	say "Create archive $dest ...";
	chdir $src;
	run 'tar -cf ' . $dest . ' .';
}

sub has_dir {
	my $dir = shift;
	my $destPath = shift;

	opendir(my $dh, $destPath);
	my @files = readdir($dh);
	closedir($dh);

	for my $f (@files) {
		if ($f eq $dir) {
			return 1;
		}
	}

	return 0;
}

sub node_path {
	my $basePath = shift;

	my $binPath = '';
	if (!defined $basePath) {
		$basePath = get_env('SOLUTION_NODE_BIN');
		if ($basePath ne '') {
			$basePath = dirname(get_env('SOLUTION_NODE_BIN'));
		}
		$binPath = '';
	} else {
		$binPath = '/bin';
	}

	my $path = $basePath . $binPath;
	if ($path ne '') {
		if (index($ENV{'PATH'}, $path) != 0) {
			$ENV{'PATH'} = $path . ':' . $ENV{'PATH'};
		}
	}

	if ($path ne '') {
		$path .= '/';
	}

	return $path . 'node'; #TODO 'node' or 'node.cmd'
}

sub node_tool {
	my $cmd = shift;

	my $path = dirname(node_path());
	if ($path eq '.') {
		$path = '';
	}
	if ($path ne '') {
		$path .= '/';
	}

	return $path . $cmd;
}

sub skip_file {
	my $path = shift;

	if ((index($path, '/.dev/') >= 0)
			|| (index($path, '/.git/') >= 0)) {
		return 1;
	}

	my $name = basename($path);
	# ?	.umd.js
	# ?	.pkgd.js
	# ?	.esm.js
	# ?	.bundle.js
	if (($name eq 'webpack.config.js')
			|| ($name eq 'bundle.config.js')
			|| ($name eq 'karma.conf.js')
			|| ($name eq 'gulpfile.js')
			|| ($name eq 'package.js')) {
		return 1;
	}

	return 0;
}

sub minify_dir {
	my $basePath = shift;
	my $toolPath = shift;

	if ($toolPath eq '') {
		return;
	}
	if (! -d $basePath) {
		return;
	}

	say "Minify $basePath ...";

	find (sub {
		my $f = $File::Find::name;

		if (!-f $f) {
			return;
		}

		if (skip_file($f)) {
			return;
		}

		my $destFile;
		my $minCss = '.min.css';
		my $minJs = '.min.js';
		my $isCss = 0;
		if ((substr($_, -3) eq '.js') && (substr($_, -7) ne $minJs)) {
			$destFile = dirname($f) . '/' . basename($f, '.js') . $minJs;
		} elsif ((substr($_, -4) eq '.css') && (substr($_, -8) ne $minCss)) {
			$isCss = 1;
			$destFile = dirname($f) . '/' . basename($f, '.css') . $minCss;
		} else {
			return;
		}

		if (!is_bx_debug()) {
			say "\t" . remove_base_path($f) . ' -> ' . basename($destFile);
		}

		my $args = '';
		if ($isCss) {
			$args .= ' --loader=css';
		}
		$args .= ' --minify';

		run "cat '$f' | $toolPath $args > '$destFile'";

    }, $basePath);

	say '';
}

sub es6_dir {
	my $basePath = shift;
	my $toolPath = shift;

	if ($toolPath eq '') {
		return;
	}
	if (! -d $basePath) {
		return;
	}

	say "Transpile $basePath ...";

	find (sub {
		my $f = $File::Find::name;

		if (!-f $f) {
			return;
		}

		if (skip_file($f)) {
			return;
		}

		my $destFile;
		if ((substr($_, -7) eq '.es6.js')) {
			$destFile = dirname($f) . '/' . basename($f, '.es6.js') . '.js';
		} else {
			return;
		}

		if (!is_bx_debug()) {
			say "\t" . remove_base_path($f) . ' -> ' . basename($destFile);
		}

		my $jsOut = exists $ENV{'SOLUTION_JS_OUTPUT'}? $ENV{'SOLUTION_JS_OUTPUT'} : 'ECMASCRIPT_2018';
		my $args = " --language_in ECMASCRIPT_2021 --language_out " . $jsOut
			. " --js '$f' --js_output_file '$destFile'";

		run "$toolPath $args";

    }, $basePath);

	say '';
}

sub process_with_tool {
	my $basePath = shift;
	my $onlyCurrentDir = shift;
	my $tool = shift;
	my $fn = shift;

	my $path;
	my $toolPath = node_tool($tool);

	#FIX convert assets to UTF before minify
	my @actionParams = ('conv', 'utf', $onlyCurrentDir? '.' : '', 'js,css');
	run_php_action(@actionParams);

	if ($onlyCurrentDir) {
		$path = getcwd();
		$fn->($path, $toolPath);
	} else {
		my $reposInfoLink = get_map_repos($basePath);
		my @reposInfo = @{$reposInfoLink};
		for my $info (@reposInfo) {
			$path = $info->{'path'};
			$fn->($path, $toolPath);
		}
	}
}

# actions

sub action_install_php {
	#if (check_command('php')) {
	#	return;
    #}
	if (is_mingw()) {
		my $homeBin = $ENV{'HOME'} . '/bin';
		my $destPath = $homeBin . '/php';
		my $outputFile = download_binaries('PHP_URLS', $homeBin, $destPath);
		if (-f $outputFile) {
			unlink($outputFile);
		}
		patch_file($ENV{'HOME'} . '/.profile', 'PATH=$HOME/bin/php:$PATH');
		#$ENV{'PATH'} = $ENV{'HOME'} . '/bin/php:' . $ENV{'PATH'};
	} elsif (is_ubuntu()) {
		my $phpVersion = defined $ARGV[1]? $ARGV[1] : '';
		install_php($phpVersion);
	}
	#TODO!!! add to windows PATH
}

sub action_install_js {
	my $basePath = shift;

	my $version = defined $ARGV[1]? $ARGV[1] : '';

	my $homeBin = $ENV{'HOME'} . '/bin';
	my $destPath = $homeBin . '/node';
	my $outputFile = download_binaries('NODE' . $version . '_URLS', '', $destPath);

	# check subdir
	my $path = $destPath;
	my $dir = basename($outputFile, '.tar.gz', '.zip');
	if (has_dir($dir, $destPath)) {
		$path .= '/' . $dir;
	}

	$path = dirname(node_path($path));
	say 'Using node from: ' . $path;

	my %packages = (
		'esbuild' => 'esbuild',
		'google-closure-compiler' => 'Google Closure Compiler',
		'@bitrix/cli' => '@bitrix/cli',
	);
	for my $package (keys(%packages)) {
		my $title = $packages{$package};
		say "Installing  $title ...";
		run "npm install -g $package";
		say '';
	}

	if ($version eq '') {
		say 'Updating ~/.profile';
		say "\t" . 'NODE_BIN="' . $path . '"';
		replace_var_file($ENV{'HOME'} . '/.profile', 'NODE_BIN', $path);
	}
}

sub action_minify {
	my $basePath = shift;
	my $onlyCurrentDir = defined $ARGV[1]? ($ARGV[1] eq '.') : 0;

	process_with_tool(
		$basePath,
		$onlyCurrentDir,
		'esbuild',
		\&minify_dir
	);
}

sub action_es6 {
	my $basePath = shift;
	#my $onlyCurrentDir = defined $ARGV[1]? ($ARGV[1] eq '.') : 0;
	my $onlyCurrentDir = 1;

	process_with_tool(
		$basePath,
		$onlyCurrentDir,
		'google-closure-compiler',
		\&es6_dir
	);
}

sub action_install_mkcert {
	my $certKeyName = (exists $ENV{'BX_MKCERT'} && ($ENV{'BX_MKCERT'} ne ''))?
		$ENV{'BX_MKCERT'} : 'bx.local *.bx.local';
	$certKeyName = join(' ', map { '"' . $_ . '"' } split(/\s+/, $certKeyName));

	my $srcUrl = 'https://github.com/FiloSottile/mkcert';
	my $homeBin = $ENV{'HOME'} . '/bin';
	my $destPath = $homeBin . '/mkcert-src';

	if (is_ubuntu()) {
		if (-d $destPath) {
			remove_tree($destPath);
		}

		sudo('apt install libnss3-tools');
    	sudo('sudo apt install golang');

    	run("git clone '$srcUrl' '$destPath'");
		chdir($destPath);

    	run('go build -ldflags "-X main.Version=$(git describe --tags)"');

		if (-l ($homeBin . '/mkcert')) {
			unlink($homeBin . '/mkcert');
		}
		symlink($destPath . '/mkcert', $homeBin . '/mkcert');

		run('mkcert -install');

		my $sslPath = $ENV{'HOME'} . '/.ssl/';
		if (! -d $sslPath) {
			mkdir($sslPath);
		}
		chdir($sslPath);
    	run('mkcert ' . $certKeyName);

		sudo('a2enmod ssl');
    }
}

sub action_install_lamp {
	if (is_ubuntu()) {
		say '';
		say '# Install php, apache2, mysql and tools...';

        sudo('apt install software-properties-common -y');
		sudo('add-apt-repository ppa:ondrej/php');

		sudo('apt-get update -y');

		sudo('apt install unzip wget curl dos2unix pwgen sshpass screen');
		sudo('apt install'
			. ' apache2 libapache2-mod-fcgid'
            . ' mysql-server mysql-client'
            . ' php libapache2-mod-php'
        );

		install_php();

		# sudo adduser bitrix www-data
		sudo('usermod -a -G www-data ' . $ENV{'USER'});
		sudo('chmod 755 ~/');
		run('chmod +x /home/' . $ENV{'USER'});
		my $homePath = $ENV{'HOME'};
		my $extWww = $homePath . '/ext_www';
		if (! -d $extWww) {
			mkdir $extWww;
		}

		#TODO ??? patch  /etc/apache2/apache2.conf -> <Directory /> -> AllowOverride All
		#say 'Add to /etc/apache2/apache2.conf -> <Directory />';
		#say '	AllowOverride All';
		#say '	Require all granted';
		#say '';
		# ???
		#<Directory /home/bitrix/work/>
		#	Options Indexes FollowSymLinks
		#	AllowOverride All
		#	Require all granted
		#</Directory>

		sudo('a2enmod php');

		sudo('a2enmod actions');
		sudo('a2enmod fcgid');
		sudo('a2enmod alias');
		sudo('a2enmod proxy_fcgi');

		sudo('a2enmod rewrite');
		sudo('a2enmod proxy');
		sudo('a2enmod proxy_http');

        sudo('apt install msmtp');

        sudo('apt install optipng jpegoptim pngquant');

        #sudo('apt install rinetd');

		#TODO!!! версии ниже ?7.2 не работают с mysql8 из коробки
        #sudo('apachectl configtest')
        # global switch php (для основной версии mod_php)
        #sudo('a2dismod php7.4')
        #sudo('a2enmod php')

		say '';
		say '# Mysql config setup...';
		sudo('mysql_secure_installation');
		say '';
		say '# Mysql config check...';
		sudo('mysqladmin -p -u root version');

		my $mysqlContent = file_get_contents(dirname($RealBin) . '/.template/ubuntu/bitrix.my.cnf');
		sudo_patch_file('/etc/mysql/my.cnf', $mysqlContent);

		say '';
		say '# Mail sender setup...';
		copy(dirname($RealBin) . '/.template/.msmtprc', $homePath . '/.msmtprc');
		sudo('chown www-data:www-data ' . $homePath . '/.msmtprc');
		sudo('chmod 0600 ' . $homePath . '/.msmtprc');
		if (-f '/etc/msmtprc') {
			sudo('unlink /etc/msmtprc');
		}
		sudo('ln -s ' . $homePath . '/.msmtprc /etc/msmtprc');

		say '';
		say '# Setup locale for windows-1251...';
		sudo('locale-gen ru_RU.CP1251');
		sudo('dpkg-reconfigure locales');

		# check locale:
		#	`locale -a | grep ru`
		#	`less /usr/share/i18n/SUPPORTED | grep ru_RU | grep CP1251`
		# for centos:
		#	`localedef -c -i ru_RU -f CP1251 ru_RU.CP1251`
	}
}

sub action_install {
	# on windows HOME: $ENV{'USERPROFILE'}

	my $homeBin = $ENV{'HOME'} . '/bin';
    if (!-d $homeBin) {
        mkdir($homeBin);
    }

	my $fnameEnv = dirname($RealBin) . '/.env';
	if (!(-f $fnameEnv)) {
		copy(dirname($RealBin) . '/.env.example', $fnameEnv);
	}

	if (is_mingw()) {
		patch_file($ENV{'HOME'} . '/.profile', 'export MSYS=winsymlinks:native');
    }

	my $homeScript = $homeBin . '/' . $Script;
	if (-l $homeScript) {
		unlink($homeScript);
	}
	symlink($RealBin . '/' . $Script, $homeScript);

	action_install_php();
}

sub action_fetch {
	my %urlEditions = (
		'micro' => $ENV{'BITRIX_SRC_MICRO'},
		'core' => $ENV{'BITRIX_SRC_CORE'},
		'start' => $ENV{'BITRIX_SRC_START'},
		'business' => $ENV{'BITRIX_SRC_BUSINESS'},
		'crm' => $ENV{'BITRIX_SRC_CRM'},
		'setup' => $ENV{'BITRIX_SRC_SETUP'},
		'restore' => $ENV{'BITRIX_SRC_RESTORE'},
		'test' => $ENV{'BITRIX_SRC_TEST'},
	);

	my $edition = (scalar @ARGV > 1) ? $ARGV[1] : 'start';
	if (!exists $urlEditions{$edition}) {
		$edition = 'start';
	}

	my $outputFile = '.bitrix.tar.gz';
	my $extractOptions = '';
	if (-f $outputFile) {
		unlink($outputFile);
	}
	if ($edition eq 'setup') {
		$outputFile = 'bitrixsetup.php';
	} elsif ($edition eq 'restore') {
		$outputFile = 'restore.php';
	} elsif ($edition eq 'test') {
		$outputFile = 'bitrix_server_test.php';
	} elsif ($edition eq 'micro') {
		$extractOptions = './bitrix/modules';
	}

 	my $srcUrl = $urlEditions{$edition};
	if ($srcUrl eq '')
	{
		return;
	}

	say "Loading $srcUrl...";
	request_get($srcUrl, $outputFile);
	if (!-f $outputFile) {
    	die('Error on loading bitrix edition or script ' . $srcUrl);
  	}

	if ($edition ~~ ['setup', 'restore', 'test']) {
		return;
	}

	say 'Extracting files...';
  	tgz_archive_extract($outputFile, '', $extractOptions);
	unlink($outputFile);

	if ($edition eq 'core') {
		say 'Minimize for core...';
		bitrix_minimize();
	} elsif ($edition eq 'micro') {
		say 'Micromize...';
		bitrix_minimize();
		bitrix_micromize();
	}
}

sub action_env {
	my $basePath = shift;
	require_site_root($basePath);

	our %config;
	say "Site root:\n\t$basePath\n";

	my $ftp = ftp_conn_str();
	if ($ftp ne '') {
		say "FTP:\n\t" . ftp_conn_str();
		say '';
	}

	my $connStr = get_ssh_command();
	if ($connStr ne '') {
		say 'SSH:';
		say "\t" . $connStr;
		say "\t" . ssh_exec_remote();
		say '';
		say "\t" . get_putty_command();
		say "\t" . putty_exec_remote();
		say "\t" . get_putty_command(1);
		say "\t" . putty_exec_remote('', 1);

		say "\t" . get_filezilla_command(ftp_conn_str(), $basePath);

		say '';
	}

	say 'ENV config:';
	for my $k (sort (keys %config)) {
		my $value = $ENV{$k};

		if ($k ~~ [
				'BX_SITE_CONFIG_DEST',
				'BX_SITE_CONFIG_SRC',
				'BX_BACKUP_GIT_REPOS_DEST',
				'BX_BACKUP_GIT_REPOS',
				'SOLUTION_GIT_REPOS',
			]) {
			$value = '...';
		} elsif (index($value, "\t") >= 0) {
			$value = "\n\t" . join("\n\t", split("\t", $value)) . "\n";
		}

		say "    $k -> " . $value;
	}
}

sub action_ftp {
	my $basePath = shift;
	require_site_root($basePath);

	my $path;
	my $conn_str = ftp_conn_str();
	if (is_mingw()) {
		run 'start ' . get_filezilla_command($conn_str, $basePath);
	} elsif (is_wsl()) {
		run_win_cmd 'start ' . get_filezilla_command($conn_str, $basePath);
	} else {
		require_command('filezilla');
		if (`which screen`) {
			# ubuntu
			run get_filezilla_command($conn_str, $basePath, 'screen -d -m filezilla');
		} else {
			# arch
			run '(' . get_filezilla_command($conn_str, $basePath) . ' &> /dev/null &)';
		}
	}
}

sub action_ssh {
	my $basePath = shift;
	require_site_root($basePath);
	require_command('ssh');
	require_command('sshpass');

	run ssh_exec_remote();
}

sub action_ssh_test {
	my $basePath = shift;
	require_site_root($basePath);
	require_command('ssh');

	run get_ssh_command();
}


sub action_putty {
	my $basePath = shift;
	require_site_root($basePath);
	require_command('putty');

	run putty_exec_remote('', 1);
}

sub action_solution_links {
	my $basePath = shift;
	require_site_root($basePath);

	my $reposInfoLink = get_map_repos($basePath);
	my @reposInfo = @{$reposInfoLink};
	for my $info (@reposInfo) {
		my $modulePath = $info->{'path'};
		my $moduleName = basename($info->{'moduleId'});
		process_module_links(
			$basePath,
			$modulePath,
			$moduleName
		);
	}
}

# main

our $site_root = detect_site_root('');
if ($site_root eq '') {
	$site_root = detect_site_root('', 0);
}

# load params
init_default_env();

# env params from bx path
our %config = load_env($RealBin . '/.env');

# env params from site
my %configSite = load_env($site_root . '/.env');
for my $k (keys %configSite) {
	$config{$k} = $configSite{$k};
}

# env params from site BX_ENV
my $envPrefix = '';
if (exists $ENV{'BX_ENV'}) {
	$envPrefix = $ENV{'BX_ENV'};
}
if ($envPrefix ne '') {
	my $envFname = $site_root . '/.env.' . $envPrefix;
	require_file($envFname, 'ENV');
	my %configBxEnv = load_env($envFname);
	for my $k (keys %configBxEnv) {
		$config{$k} = $configBxEnv{$k};
	}
}

# process commands
my %actions = (
	'install' => {
		'fn' => \&action_install,
	},

	'install-php' => {
		'fn' => \&action_install_php,
	},

	'install-js' => {
		'fn' => \&action_install_js,
	},

	'install-lamp' => {
		'fn' => \&action_install_lamp,
	},

	'install-mkcert' => {
		'fn' => \&action_install_mkcert,
	},

	'fetch' => {
		'fn' => \&action_fetch,
	},

	'env' => {
		'fn' => \&action_env,
	},

	'ftp' => {
		'fn' => \&action_ftp,
	},

	'ssh' => {
		'fn' => \&action_ssh,
	},

	'ssh-test' => {
		'fn' => \&action_ssh_test,
	},

	'putty' => {
		'fn' => \&action_putty,
	},

	'solution-links' => {
		'fn' => \&action_solution_links,
	},

	'minify' => {
		'fn' => \&action_minify,
	},

	'es6' => {
		'fn' => \&action_es6,
	},
);

sub run_php_action {
	my @params = @_;
	our $site_root;

	$ENV{'DOCUMENT_ROOT'} = $site_root;

	my $cliPath = dirname($RealBin) . '/include.php';
	my $args = "'" . join("' '", @params) . "'";

	run("php '$cliPath' '$site_root' $args", '', 1);
}

my $action = '';
if (scalar @ARGV > 0) {
	$action = $ARGV[0];
} else {
	$action = 'help';
}
if ($action ne '') {
	if (exists $actions{$action}) {
		my $actionFn = $actions{$action}->{'fn'};
		$actionFn->($site_root);
	} else {
		run_php_action(@ARGV);
	}
}
