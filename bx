#!/usr/bin/env perl

use 5.016;
use warnings;
use FindBin qw($RealBin $Bin $Script);
use Config;
use File::Basename;
use File::Copy;

sub init_default_env {
	$ENV{'DART_URLS_WIN32'} = 'https://storage.googleapis.com/dart-archive/channels/stable/release/2.18.2/sdk/dartsdk-windows-ia32-release.zip';
	$ENV{'DART_URLS_WIN64'} = 'https://storage.googleapis.com/dart-archive/channels/stable/release/2.18.2/sdk/dartsdk-windows-x64-release.zip';
	$ENV{'DART_URLS_MACOS'} = 'https://storage.googleapis.com/dart-archive/channels/stable/release/2.18.2/sdk/dartsdk-macos-x64-release.zip';
	$ENV{'DART_URLS_LINUX'} = 'https://storage.googleapis.com/dart-archive/channels/stable/release/2.18.2/sdk/dartsdk-linux-x64-release.zip';

	$ENV{'PHP_URLS_WIN32'} = 'https://windows.php.net/downloads/releases/php-7.4.32-Win32-vc15-x86.zip';
	$ENV{'PHP_URLS_WIN64'} = 'https://windows.php.net/downloads/releases/php-7.4.32-Win32-vc15-x64.zip';
	$ENV{'PHP_URLS_MACOS'} = '';
	$ENV{'PHP_URLS_LINUX'} = '';

	$ENV{'NODE_URLS_WIN32'} = "https://nodejs.org/dist/v14.16.0/node-v14.16.0-win-x86.zip";
	$ENV{'NODE_URLS_WIN64'} = "https://nodejs.org/dist/v14.16.0/node-v14.16.0-win-x64.zip";
	$ENV{'NODE_URLS_MACOS'} = "https://nodejs.org/dist/v14.16.0/node-v14.16.0-darwin-x64.tar.gz";
	$ENV{'NODE_URLS_LINUX'} = "https://nodejs.org/dist/v14.16.0/node-v14.16.0-linux-x64.tar.gz";

	$ENV{'NODE_URLS_BITRIX_WIN32'} = "https://nodejs.org/dist/v9.11.2/node-v9.11.2-win-x86.zip";
	$ENV{'NODE_URLS_BITRIX_WIN64'} = "https://nodejs.org/dist/v9.11.2/node-v9.11.2-win-x64.zip";
	$ENV{'NODE_URLS_BITRIX_MACOS'} = "https://nodejs.org/dist/v9.11.2/node-v9.11.2-darwin-x64.tar.gz";
	$ENV{'NODE_URLS_BITRIX_LINUX'} = "https://nodejs.org/dist/v9.11.2/node-v9.11.2-linux-x64.tar.gz";

	$ENV{'BITRIX_SRC_MICRO'} = "https://www.1c-bitrix.ru/download/start_encode_php5.tar.gz";
	$ENV{'BITRIX_SRC_CORE'} = "https://www.1c-bitrix.ru/download/start_encode_php5.tar.gz";
	$ENV{'BITRIX_SRC_START'} = "https://www.1c-bitrix.ru/download/start_encode_php5.tar.gz";
	$ENV{'BITRIX_SRC_BUSINESS'} = "https://www.1c-bitrix.ru/download/business_encode_php5.tar.gz";
	$ENV{'BITRIX_SRC_CRM'} = "https://www.1c-bitrix.ru/download/portal/bitrix24_encode_php5.tar.gz";
	$ENV{'BITRIX_SRC_SETUP'} = "https://www.1c-bitrix.ru/download/scripts/bitrixsetup.php";
	$ENV{'BITRIX_SRC_RESTORE'} = "https://www.1c-bitrix.ru/download/scripts/restore.php";
	$ENV{'BITRIX_SRC_TEST'} = "https://dev.1c-bitrix.ru/download/scripts/bitrix_server_test.php";

	$ENV{'BX_MKCERT'} = "bx.local *.bx.local";
	$ENV{'DIR_LOCAL_SITES'} = "~/Local Sites/";
	$ENV{'DIR_PUBLIC'} = "/public/";
}

sub is_mingw() {
    my $msystem = exists $ENV{'MSYSTEM'} ? $ENV{'MSYSTEM'} : '';
    if (($msystem eq 'MINGW64') or ($msystem eq 'MINGW32') or ($msystem eq 'MSYS')) {
        return 1;
    }
    return 0;
}

sub is_windows_32bit {
	return (index($ENV{'PROCESSOR_ARCHITECTURE'}, 'x86') >= 0)? 1 : 0;
}

sub file_get_contents {
    my $filename = shift;
    my $result = '';
    if (open(my $fh, '<:encoding(UTF-8)', $filename)) {
        while (my $line = <$fh>) {
            $result .= $line;
        }
    }
    return $result;
}

sub file_put_contents {
    my $filename = shift;
    my $content = shift;
    if (open(my $fh, '>:encoding(UTF-8)', $filename)) {
        print $fh $content;
        close $fh;
        return 1;
    }
    return 0;
}

sub trim {
    my $s = shift;
    $s =~ s/^\s+|\s+$//g;
    return $s;
}

sub confirm_continue {
    my $title = shift;
    print $title . " Type 'yes' to continue: ";
    my $line = <STDIN>;
    chomp $line;
    return trim($line) eq 'yes';
}

sub check_command {
    my $cmd = shift;
    my $test = 'which ' . $cmd;
    if (qx{$test} eq '') {
        return 0;
    }
    return 1;
}

sub require_command {
    my $cmd = shift;
    my $test = 'which ' . $cmd;
    if (qx{$test} eq '') {
        die('[' . $cmd . '] command - not found.');
    }
}

sub ziparchive_extract {
    require_command('unzip');

	my ($src, $dest) = @_;
	my $result = '';
	my $cmd = "unzip -o '$src' -d '$dest'";
	$result = qx{$cmd};
	return $result;
}

sub request_useragent {
    return 'Mozilla/5.0 (X11; Linux x86_64; rv:66.0) Gecko/20100101 Firefox/66.0';
}

sub request_get {
    require_command('curl');

    my ($url, $outfile) = @_;
    my $result = '';
    my $cmd = "curl -L '$url'"
        . " -A '" . request_useragent() . "'";
    if ($outfile && ($outfile ne '')) {
        $cmd .= " -o '$outfile'";
    }
    $result = qx{$cmd};
    return $result;
}

sub is_bx_debug() {
	return (exists $ENV{'BX_DEBUG'} && ($ENV{'BX_DEBUG'} eq '1'));
}

sub run {
	my $cmd = shift;
	my $sudo = shift;
	my $debug = shift;
	if (!defined($sudo) || $sudo ne 'sudo') {
		$sudo = '';
	}
	$cmd = trim($sudo . ' ' . $cmd);
	if (!defined $debug || $debug) {
		if (is_bx_debug()) {
			say '';
			say $cmd;
		}
	}
	return system($cmd);
}

sub is_ubuntu {
	my $os = $Config{'myuname'};
	return (index($os, 'debian') > 0
		|| index($os, 'ubuntu') >= 0
		|| index($os, 'Ubuntu') >= 0);
}

sub sudo_run {
	my $cmd = shift;
	my $sudo = '';
	if (is_ubuntu()) {
		$sudo = 'sudo';
	}
	if (exists $ENV{'BX_ROOT_USER'} && ($ENV{'BX_ROOT_USER'} eq '1')) {
		$sudo = '';
	}
	return run($cmd, $sudo);
}

sub sudo_patch_file {
	my $fname = shift;
	my $content = shift;
	if (! -f $fname) {
		return;
	}
	my $path = $ENV{'HOME'};
	my $tmp = $path . '/.patch.' . basename($fname) . '.tmp';
	my $originalContent = file_get_contents($fname);
	if (index($originalContent, $content) < 0) {
		$content = $originalContent . "\n" . $content . "\n";
		file_put_contents($tmp, $content);
		sudo_run("mv '" . $tmp . "' " . $fname);
	}
}

sub download_binaries {
	my $urlPrefix = shift;
	my $downloadPath = shift;
	my $destPath = shift;

	if (!$destPath) {
		$destPath = $downloadPath;
	}

	my $srcUrl = '';
	if (is_mingw()) {
		if (is_windows_32bit()) {
			$srcUrl = $ENV{$urlPrefix . '_WIN32'};
		}
		else {
			$srcUrl = $ENV{$urlPrefix . '_WIN64'};
		}
	}
	elsif (is_ubuntu()) {
		$srcUrl = $ENV{$urlPrefix . '_LINUX'};
	}
	else {
		$srcUrl = $ENV{$urlPrefix . '_MACOS'};
	}

	if ($srcUrl eq '') {
		say 'Url for ' . $urlPrefix . ' not defined.';
		return '';
	}

	my $outputFile = $downloadPath . '/' . basename($srcUrl);
	say "Loading $srcUrl ...";
	request_get($srcUrl, $outputFile);

	say "Extracting $outputFile ...";
	ziparchive_extract($outputFile, $destPath);

	return $outputFile;
}

sub action_install_dart {
	if (check_command('dart')) {
		return;
    }

	# https://dart.dev/get-dart
	my $homeBin = $ENV{'HOME'} . '/bin';
	my $outputFile = download_binaries('DART_URLS', $homeBin);
	if (-d $homeBin . '/dart-sdk') {
		rename($homeBin . '/dart-sdk', $homeBin . '/dart');
	}
	if (-f $outputFile) {
		unlink($outputFile);
	}

	my $initPath = 'PATH=$HOME/bin/dart/bin:$PATH';
	my $fname;
	if (is_mingw()) {
		$fname = $ENV{'HOME'} . '/.bash_profile';
	}
	else {
		$fname = $ENV{'HOME'} . '/.profile';
	}
	my $content = file_get_contents($fname);
	if (index($content, $initPath) < 0) {
		file_put_contents($fname, $content . "\n" . $initPath . "\n");
	}

	$ENV{'PATH'} = $ENV{'HOME'} . '/bin/dart/bin:' . $ENV{'PATH'};
}

sub action_php_install {
	if (check_command('php')) {
		return;
    }

	if (is_mingw()) {
		my $homeBin = $ENV{'HOME'} . '/bin';
		my $destPath = $homeBin . '/php';
		my $outputFile = download_binaries('PHP_URLS', $homeBin, $destPath);
		if (-f $outputFile) {
			unlink($outputFile);
		}
	} elsif (is_ubuntu()) {
		say 'TOO install php7.4 from ppa:ondrej/php ...';
	}

}

sub action_self_install {
    my $homeBin = $ENV{'HOME'} . '/bin';
    if (!-d $homeBin) {
        mkdir($homeBin);
    }

	my $fnameEnv = $RealBin . '/.env';
	if (!(-f $fnameEnv)) {
		copy($RealBin . '/.env.example', $fnameEnv);
	}

    if (is_mingw()) {
        my $fname = $ENV{'HOME'} . '/.bash_profile';
        my $initPath = 'PATH=$PATH:$HOME/bin/6umpukc';
        if (-f $fname) {
            my $content = file_get_contents($fname);
            if (index($content, $initPath) < 0) {
                file_put_contents($fname, $content . "\n" . $initPath . "\n");
            }
        }
        else {
            file_put_contents($fname, "\n" . $initPath . "\n");
        }
    }
    else {
        my $homeScript = $homeBin . '/' . $Script;
        if (-l $homeScript) {
            unlink($homeScript);
        }
        symlink($RealBin . '/' . $Script, $homeScript);
    }

	action_install_dart();
	system 'dart pub get';

	action_php_install();
}

sub action_mkcert_install {
    if (is_ubuntu()) {
		my $certKeyName = (exists $ENV{'BX_MKCERT'} && ($ENV{'BX_MKCERT'} ne ''))?
			$ENV{'BX_MKCERT'} : 'bx.local *.bx.local';
		$certKeyName = join(' ', map { '"' . $_ . '"' } split(/\s+/, $certKeyName));

		sudo_run('apt install libnss3-tools');
    	sudo_run('snap install go --classic');
    	run('rm -Rf ~/bin/mkcert-src/');
    	run('git clone https://github.com/FiloSottile/mkcert ~/bin/mkcert-src');
    	run('cd ~/bin/mkcert-src/ && go build -ldflags "-X main.Version=$(git describe --tags)" && mv mkcert ~/bin/mkcert');
    	run('mkcert -install');
    	run('mkdir ~/.ssl/ && cd ~/.ssl/ && mkcert ' . $certKeyName);
    	sudo_run('a2enmod ssl');
    }
}

sub action_lamp_install {
	if (is_ubuntu()) {
		say '';
		say '# Install php, apache2, mysql and tools...';

        sudo_run('apt install software-properties-common -y');

        sudo_run('apt install unzip wget curl dos2unix pwgen sshpass screen');

		#TODO!!! ломает php7.4 на ubuntu20.04
		#!!!
        #sudo_run('add-apt-repository ppa:ondrej/php');

        sudo_run('apt-get update -y');

        # sudo nano /etc/apache2/apache2.conf -> <Directory /> -> AllowOverride All
        # sudo chmod 755 ~/

		#sudo_run('apt install'
		#	. ' php apache2 libapache2-mod-php mysql-server mysql-client php-mysql'
		#	. ' php-mbstring php-opcache php-zip php-xml php-curl php-gd php-sqlite3 php-imagick'
		#	. ' php-xdebug'
        #);

        sudo_run('apt install'
			. ' apache2'
            . ' mysql-server mysql-client'
            . ' php7.4 libapache2-mod-php7.4 php7.4-mysql'
			. ' php7.4-mbstring php7.4-opcache php7.4-zip php7.4-xml php7.4-curl php7.4-gd php7.4-sqlite3 php7.4-imagick'
			. ' php7.4-xdebug'
        );

        sudo_run('apt install msmtp');
        sudo_run('apt install optipng jpegoptim pngquant');
        sudo_run('apt install rinetd');

		sudo_run('a2enmod rewrite');
		sudo_run('a2enmod proxy');
		sudo_run('a2enmod proxy_http');

		#!!!
		#sudo_run('snap install node --classic');

        #TODO!!! настройки для установки разных версий php
        # https://www.8host.com/blog/zapusk-neskolkix-versij-php-na-odnom-servere-s-pomoshhyu-apache-i-php-fpm-v-ubuntu-20-04/
        # https://linuxize.com/post/how-to-install-php-8-on-ubuntu-20-04/

        # example: install php 7.1
        # sudo apt-get install php7.1 php7.1-fpm php7.1-mysql libapache2-mod-php7.1 libapache2-mod-fcgid -y

	# FIX??? error install php7.4-cli: sudo apt install libpcre2-16-0=10.34-7 libssl1.1=1.1.1f-1ubuntu2.2

        # sudo systemctl start php7.1-fpm
        # sudo systemctl status php7.1-fpm
	#TODO!!! версии 7.1-7.3 не работают с mysql

        # sudo a2enmod actions fcgid alias proxy_fcgi

        # в файл конфига сайта добавляется:
        #    <FilesMatch \.php$>
        #        # From the Apache version 2.4.10 and above, use the SetHandler to run PHP as a fastCGI process server
        #        SetHandler "proxy:unix:/run/php/php7.1-fpm.sock|fcgi://localhost"
        #    </FilesMatch>

        # sudo apachectl configtest

        # global switch php (для основной версии mod_php)
        # sudo a2dismod php7.4
        # sudo a2enmod php8.1

        # patch configs
		my $phpContent = file_get_contents($RealBin . '/.template/bitrix.php.ini');
		my @phpDirs = glob('/etc/php/*');
        my @tmp = map { basename($_) } sort { $b cmp $a } @phpDirs;
		#TODO!!! patch all php version configs
        my $phpVersion = shift @tmp;
		sudo_patch_file('/etc/php/' . $phpVersion . '/apache2/php.ini', $phpContent);
		sudo_patch_file('/etc/php/' . $phpVersion . '/cli/php.ini', $phpContent);

		my $homePath = $ENV{'HOME'};
		my $extWww = $homePath . '/ext_www';
		if (! -d $extWww) {
			mkdir $extWww;
		}
		sudo_run('usermod -a -G www-data ' . $ENV{'USER'});
		#run 'chmod +x /home/' . $ENV{'USER'};

		say '';
		say '# Mysql config setup...';
		sudo_run('mysql_secure_installation');
		say '';
		say '# Mysql config check...';
		sudo_run('mysqladmin -p -u root version');

		my $mysqlContent = file_get_contents($RealBin . '/.template/ubuntu18.04/bitrix.my.cnf');
		sudo_patch_file('/etc/mysql/my.cnf', $mysqlContent);

		say '';
		say '# Mail sender setup...';
		copy($RealBin . '/.template/.msmtprc', $homePath . '/.msmtprc');
		sudo_run('chown www-data:www-data ' . $homePath . '/.msmtprc');
		sudo_run('chmod 0600 ' . $homePath . '/.msmtprc');
		if (-f '/etc/msmtprc') {
			sudo_run('unlink /etc/msmtprc');
		}
		sudo_run('ln -s ' . $homePath . '/.msmtprc /etc/msmtprc');

		say '';
		say '# Setup locale for windows-1251...';
		sudo_run('locale-gen ru_RU.CP1251');
		sudo_run('dpkg-reconfigure locales');

		# check locale:
		#	`locale -a | grep ru`
		#	`less /usr/share/i18n/SUPPORTED | grep ru_RU | grep CP1251`
		# for centos:
		#	`localedef -c -i ru_RU -f CP1251 ru_RU.CP1251`
	}
}

init_default_env();

if (defined($ARGV[0]) && ($ARGV[0] eq 'self-install')) {
    action_self_install();
}
elsif (defined($ARGV[0]) && ($ARGV[0] eq 'php-install')) {
    action_php_install()
}
elsif (defined($ARGV[0]) && ($ARGV[0] eq 'lamp-install')) {
    action_lamp_install();
}
elsif (defined($ARGV[0]) && ($ARGV[0] eq 'mkcert-install')) {
    action_mkcert_install();
}
else {
    my $args = join(' ', @ARGV);
    if (-f "$RealBin/bx.exe") {
        system "'$RealBin/bx.exe' $args";
    }
    else {
        system "dart run '$RealBin/bx.dart' $args";
    }
}
